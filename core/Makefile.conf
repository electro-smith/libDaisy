# Build Settings
# ==============
# NOTE: As a user of this build system, you should _NEVER_ (have to) edit this file.
#
# The idea of this file is to present an overview of the build process in a declarative manner.
# In your project:
# * Specify the values in the section "required" below in your own Makefile
# * include the core/Makefile

# In the section "optional" (below) you see what build options there are and how they are configured
# by default. Use the customary MAKE variables like CFLAGS, LDFLAGS to append your own flags.

# You can override the defaults by selectively pulling options from here into your own project-Makefile
# and adjust the values there, based on your projects needs. (From any section)

# This only works as long as all the variables here are default initialized using either concatenation assign
# (+=) or conditional assign (?=)
# Tip: In your own Makefile, do the same thing if you like to preserve values coming from e.g, the shell.
# example: `$ TARGET=blink make`


##########################################################################################################
# Toolchain
##########################################################################################################
# GCC ARM
# if your gcc cross compiler is not in your $PATH, specify the containing dir here. must end with a '/'
GCC_DIR ?=
GCC_PREFIX ?= arm-none-eabi-

# OpenOCD
# openocd must be in your $PATH
OCD_PGM_DEVICE ?= interface/stlink.cfg
OCD_CHIPSET ?= stm32h7x
OCD_SCRIPTS_DIR ?= /usr/local/share/openocd/scripts

##########################################################################################################
# Required
##########################################################################################################
# These must be defined in the users project Makefile

# The program to compile and flash
# the name of the main cxx file without the prefix 'main_'
# you can have several files containing main() and switch using TARGET
TARGET ?=

# List of all the c and c++ source files to be compiled
CXX_SOURCES +=
C_SOURCES +=

# Location of the libDaisy to use
LIBDAISY_DIR ?=

##########################################################################################################
# Optional
##########################################################################################################
# 0 - Not a debug build. No debug symbols, some optimization
# 1 - Is a debug build. Debug symbols, no optimization
DEBUG ?= 0

# Optional Dependencies
DAISYSP_DIR ?=
USE_DAISYSP_LGPL ?= 0
USE_FATFS ?= 0

# Language levels
C_STANDARD ?= -std=gnu11
CXX_STANDARD ?= -std=gnu++14

CFLAGS +=
CXXFLAGS +=
ADFLAGS +=
LDFLAGS +=


# Specify additional suffix for c++ files
# The daisy project uses .cpp as suffix for c++ files.
USER_SUFFIX_CXX ?= .cc

# Name of the dir for the build artifacts
BUILD_DIR ?= build

# Specify what bootloader to flash using recipe 'program-boot'
BOOT_BIN ?= dsy_bootloader_v6_2-intdfu-2000ms.bin

# must be either of: BOOT_NONE | BOOT_SRAM | BOOT_QSPI | CUSTOM
# Using APP_TYPE = Custom, the custom LDSCRIPT will be used
APP_TYPE ?= BOOT_NONE
LDSCRIPT ?=


##########################################################################################################
# DangerZone
##########################################################################################################
# If you know what you are doing, remove any item (define, flag, ...) from a list by
# selectively pulling (duplicate of course) variables from here into your own project-Makefile and remove
# the item you want to get rid off.
# You cant break anything, because here you will always have the original state

DEBUG_FLAGS ?= -O0 -g -ggdb -DDEBUG
NODEBUG_FLAGS ?= -O2 -DNDEBUG

# MCU
MCU ?= -mcpu=cortex-m7 -mfpu=fpv5-d16 -mfloat-abi=hard -mthumb

# Choose startup code {ASM,C}
STARTUP_CODE ?= C

DAISY_DEFINES ?= \
  -DUSE_HAL_DRIVER \
  -DSTM32H750xx \
  -DHSE_VALUE=16000000 \
  -DCORE_CM7  \
  -DSTM32H750IB \
  -DARM_MATH_CM7 \
  -DUSE_FULL_LL_DRIVER

# Flags passed to c compiler
DAISY_CFLAGS ?= \
  -Wall \
  -Wno-missing-attributes \
  -Wno-stringop-overflow \
  -fdata-sections -ffunction-sections \
  -fasm \
  -MMD -MP -MF"$(@:%.o=%.d)"

# Flags passed to c++ compiler
DAISY_CXXFLAGS ?= \
  -Wall \
  -Wno-missing-attributes \
  -Wno-stringop-overflow \
  -fdata-sections -ffunction-sections \
  -fasm \
  -MMD -MP -MF"$(@:%.o=%.d)" \
  -Wno-register \
  -fno-exceptions \
  -finline \
  -finline-functions-called-once \
  -fshort-enums \
  -fno-move-loop-invariants \
  -fno-unwind-tables \
  -fno-rtti

# Flags passed to the assembler
DAISY_ASFLAGS ?= \
  -Wall \
  -fdata-sections \
  -ffunction-sections


GCC_SPECS ?= --specs=nano.specs --specs=nosys.specs
LINKER_OPTS ?= -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -Wl,--print-memory-usage

